/*

Use: node dotcom-rendering/scripts/gen-stories/gen-stories.js

This script was created as a replacement for storiesOf to generate all of the possible variants
of our Card and Layout components.

It should be run whenever any of the Display, Design, or Theme `format` properties change

*/

const { writeFileSync, readFileSync, mkdirSync } = require('fs');
const path = require('path');
const {
	ArticleDesign,
	ArticleDisplay,
	ArticlePillar,
	ArticleSpecial,
} = require('@guardian/libs');
const { log, success, warn } = require('../env/log.js').default;

const STORIES_PATH = path.resolve(
	__dirname,
	'..',
	'..',
	'stories',
	'generated',
);
const LAYOUT_STORIES_FILE = path.resolve(STORIES_PATH, 'Layout.stories.tsx');
const CARD_STORIES_FILE = path.resolve(STORIES_PATH, 'Card.stories.tsx');

const CARD_TEMPLATE_HEADER = `
/*
 * DO NOT EDIT THIS FILE DIRECTLY
 * These stories were auto-generated by \`dotcom-rendering/scripts/gen-stories/gen-stories.js\`
 */

import { ArticleDisplay, ArticleDesign } from '@guardian/libs';
import { CardsWithDifferentThemes } from '../../src/web/components/Card/Card.stories';

// eslint-disable-next-line import/no-default-export
export default {
	title: 'Components/Card/Format Variations',
	component: CardsWithDifferentThemes,
	chromatic: {
		diffThreshold: 0.2,
		pauseAnimationAtEnd: true,
	},
};
`;

const LAYOUT_TEMPLATE_HEADER = `
/*
 * DO NOT EDIT THIS FILE DIRECTLY
 * These stories were auto-generated by \`dotcom-rendering/scripts/gen-stories/gen-stories.js\`
 */
import { HydratedLayoutWrapper } from '../../src/web/layouts/Layout.stories';

// eslint-disable-next-line import/no-default-export
export default {
	title: 'Components/Layout/Format Variations',
	component: HydratedLayoutWrapper,
	parameters: {
		chromatic: {
			diffThreshold: 0.2,
			pauseAnimationAtEnd: true,
		},
	},
};
`;

const notNumber = (value) => {
	return Number.isNaN(Number(value));
};

const generateLayoutStory = (displayName, designName, theme) => {
	const storyVariableName = displayName + designName + theme;

	return `
export const ${storyVariableName} = () => {
	return (
		<HydratedLayoutWrapper
			displayName="${displayName}"
			designName="${designName}"
			theme="${theme}"
		/>
	);
};
${storyVariableName}.story = {
	name: '${displayName}Display ${designName}Design ${theme}'
};
`;
};

const generateCardStory = (displayName, designName) => {
	const storyName = displayName + designName;

	return `
export const ${storyName} = () => {
	return (
		<CardsWithDifferentThemes
			display={ArticleDisplay.${displayName}}
			design={ArticleDesign.${designName}}
			title="${storyName}"
		/>
	);
};
${storyName}.story = {
	name: '${displayName}Display ${designName}Design'
};
`;
};

const generateLayoutStories = () => {
	log('[scripts/gen-stories] Generating layout stories.');
	let stories = 0;
	let template = LAYOUT_TEMPLATE_HEADER;

	for (const displayName of Object.keys(ArticleDisplay)) {
		if (notNumber(displayName)) {
			for (const designName of Object.keys(ArticleDesign)) {
				if (notNumber(designName)) {
					for (const pillarName of Object.keys(ArticlePillar)) {
						if (notNumber(pillarName)) {
							template += generateLayoutStory(
								displayName,
								designName,
								pillarName,
							);

							stories++;
						}
					}

					for (const specialName of Object.keys(ArticleSpecial)) {
						if (notNumber(specialName)) {
							template += generateLayoutStory(
								displayName,
								designName,
								specialName == 'Labs'
									? 'Labs'
									: `${specialName}Theme`,
							);
							stories++;
						}
					}
				}
			}
		}
	}

	success(`[scripts/gen-stories] Generated ${stories} layout stories!`);
	return template;
};

const generateCardStories = () => {
	log('[scripts/gen-stories] Generating card stories.');
	let stories = 0;
	let template = CARD_TEMPLATE_HEADER;

	for (const displayName of Object.keys(ArticleDisplay)) {
		if (notNumber(displayName)) {
			for (const designName of Object.keys(ArticleDesign)) {
				if (notNumber(designName)) {
					template += generateCardStory(displayName, designName);
					stories++;
				}
			}
		}
	}
	success(`[scripts/gen-stories] Generated ${stories} card stories!`);

	return template;
};

const saveStories = () => {
	mkdirSync(STORIES_PATH, { recursive: true });

	const layoutContents = generateLayoutStories();
	writeFileSync(LAYOUT_STORIES_FILE, layoutContents);
	success(
		`[scripts/gen-stories] Saved layout stories to ${LAYOUT_STORIES_FILE}!`,
	);

	const cardContents = generateCardStories();
	writeFileSync(CARD_STORIES_FILE, cardContents);
	success(
		`[scripts/gen-stories] Saved layout stories to ${CARD_STORIES_FILE}!`,
	);
};

const checkStories = () => {
	const cardContents = generateCardStories();
	const cardFileContents = readFileSync(CARD_STORIES_FILE);
	const layoutContents = generateLayoutStories();
	const layoutFileContents = readFileSync(LAYOUT_STORIES_FILE);

	log(
		'[scripts/check-stories] Checking if generated stories and checked in stories match.',
	);

	if (
		cardContents !== cardFileContents.toString() ||
		layoutContents !== layoutFileContents.toString()
	) {
		warn(
			'[scripts/check-stories] Generated stories and checked in stories do not match! A new format might have been added, please run `make gen-stories`',
		);

		process.exit(1);
	}

	success(
		'[scripts/check-stories] Generated stories and checked in stories match! No further action required!',
	);
};

module.exports = {
	saveStories,
	checkStories,
};
